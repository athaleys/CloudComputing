# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class VM(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, vm_id=None, name=None, image=None, location=None, ram_size=None, disk_size=None, status=None):  # noqa: E501
        """VM - a model defined in Swagger

        :param vm_id: The vm_id of this VM.  # noqa: E501
        :type vm_id: int
        :param name: The name of this VM.  # noqa: E501
        :type name: str
        :param image: The image of this VM.  # noqa: E501
        :type image: str
        :param location: The location of this VM.  # noqa: E501
        :type location: str
        :param ram_size: The ram_size of this VM.  # noqa: E501
        :type ram_size: int
        :param disk_size: The disk_size of this VM.  # noqa: E501
        :type disk_size: int
        :param status: The status of this VM.  # noqa: E501
        :type status: str
        """
        self.swagger_types = {
            'vm_id': int,
            'name': str,
            'image': str,
            'location': str,
            'ram_size': int,
            'disk_size': int,
            'status': str
        }

        self.attribute_map = {
            'vm_id': 'vmId',
            'name': 'name',
            'image': 'image',
            'location': 'location',
            'ram_size': 'ramSize',
            'disk_size': 'diskSize',
            'status': 'status'
        }

        self._vm_id = vm_id
        self._name = name
        self._image = image
        self._location = location
        self._ram_size = ram_size
        self._disk_size = disk_size
        self._status = status

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VM of this VM.  # noqa: E501
        :rtype: VM
        """
        return util.deserialize_model(dikt, cls)

    @property
    def vm_id(self):
        """Gets the vm_id of this VM.


        :return: The vm_id of this VM.
        :rtype: int
        """
        return self._vm_id

    @vm_id.setter
    def vm_id(self, vm_id):
        """Sets the vm_id of this VM.


        :param vm_id: The vm_id of this VM.
        :type vm_id: int
        """

        self._vm_id = vm_id

    @property
    def name(self):
        """Gets the name of this VM.


        :return: The name of this VM.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VM.


        :param name: The name of this VM.
        :type name: str
        """

        self._name = name

    @property
    def image(self):
        """Gets the image of this VM.


        :return: The image of this VM.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this VM.


        :param image: The image of this VM.
        :type image: str
        """

        self._image = image

    @property
    def location(self):
        """Gets the location of this VM.


        :return: The location of this VM.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this VM.


        :param location: The location of this VM.
        :type location: str
        """

        self._location = location

    @property
    def ram_size(self):
        """Gets the ram_size of this VM.


        :return: The ram_size of this VM.
        :rtype: int
        """
        return self._ram_size

    @ram_size.setter
    def ram_size(self, ram_size):
        """Sets the ram_size of this VM.


        :param ram_size: The ram_size of this VM.
        :type ram_size: int
        """

        self._ram_size = ram_size

    @property
    def disk_size(self):
        """Gets the disk_size of this VM.


        :return: The disk_size of this VM.
        :rtype: int
        """
        return self._disk_size

    @disk_size.setter
    def disk_size(self, disk_size):
        """Sets the disk_size of this VM.


        :param disk_size: The disk_size of this VM.
        :type disk_size: int
        """

        self._disk_size = disk_size

    @property
    def status(self):
        """Gets the status of this VM.

        VM Status  # noqa: E501

        :return: The status of this VM.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VM.

        VM Status  # noqa: E501

        :param status: The status of this VM.
        :type status: str
        """
        allowed_values = ["RUNNING", "STARTING", "REBOOTING", "TERMINATED", "STOPPING", "STOPPED", "PENDING", "SUSPENDED", "ERROR", "PAUSED", "RECONFIGURING", "UNKNOWN"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
